# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

name: $(BuildID)_$(Rev:r)

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: '087f7b3b-2160-4d35-8fb9-36edb3d5651b'
- task: DownloadSecureFile@1
  name: config
  inputs:
    secureFile: 'ApiArchConfig.json'
- task: CmdLine@2
  inputs:
    script: |
      cp $(config.secureFilePath) $(Build.Repository.LocalPath)/CoreCodedChatbot.Database/CoreCodedChatbot.Database/config.json
      
      rm $(config.secureFilePath)
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/CoreCodedChatbot.Database.csproj'
- task: CmdLine@2
  inputs:
    script: 'rm $(Build.Repository.LocalPath)/CoreCodedChatbot.Database/CoreCodedChatbot.Database/config.json'
- task: NuGetCommand@2
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    versioningScheme: 'byBuildNumber'
    includeSymbols: true
- task: NuGetCommand@2
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '087f7b3b-2160-4d35-8fb9-36edb3d5651b'
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'dbDrop'
    publishLocation: 'Container'